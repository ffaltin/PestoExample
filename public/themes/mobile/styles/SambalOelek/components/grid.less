// define the minimal value
@min: @baseWidth / @nbColumns;
/* Size Method --------------------------------------- */
// define the width of the block
.setSize(@index;@gutter:0) when (@index =< @nbColumns) and (@index > 0) {
	.column();
	padding: 0;
	width: @min * @index - @gutter;
}

	// set the size with gutter when gutter is a number
	.size (@index;@gutter:0) when (isnumber(@gutter)) {
		.setSize(@index,@gutter);
		margin-right: @gutter;
	}
	// set the size and center it
	.size (@index;@gutter:0) when (@gutter = "center") {
		.setSize(@index,0);
		margin-left: (@baseWidth - @min*@index) /2;
	}
	// set the size and center it
	.size (@index;@gutter:0) when (@gutter = "right") {
		.setSize(@index,0);
		margin-left: (@baseWidth - @min*@index);
	}

	.medium-size (@index;@gutter:0) when (isnumber(@gutter)) {
		@media only screen and (max-width: @minLargeWidth) {
			.size(@index,@gutter);
		}
	}
	// small-size
	.small-size (@index;@gutter:0) when (isnumber(@gutter)) {
		@media only screen and (max-width: @minMediumWidth) {
			.size(@index,@gutter);
		}
	}

.all-size (@full:12;@medium:12;@small:12;@gutter:0;@mgutter:0;@sgutter:0) {
	.size(@full;@gutter);
	.medium-size(@medium;@mgutter);
	.small-size(@small;@sgutter);
}
	
/* *********************************************************** */
// text-align 
.text-align(@type) {
	text-align: @type;
}

	.medium-text-align(@type) {
		@media only screen and (max-width: @minLargeWidth) {
			.text-align(@type);
		}
	}

	.small-text-align(@type) {
		@media only screen and (max-width: @minMediumWidth) {
			.text-align(@type);
		}
	}

.all-text-align (@full:"left";@medium:"left";@small:"small") {
	.text-align(@full);
	.medium-text-align(@medium);
	.small-text-align(@small);
}
	
// height
.height(@value) {
	height: @value;
}

	.medium-height(@value) {
		@media only screen and (max-width: @minLargeWidth) {
			.height(@value);
		}
	}

	.small-height(@value) {
		@media only screen and (max-width: @minMediumWidth) {
			.height(@value);
		}
	}
	
.all-height(@full;@medium;@small) {
	.height(@full);
	.medium-height(@medium);
	.small-height(@small);
}

// min-height
.min-height(@value) {
	min-height: @value;
}

	.medium-min-height(@value) {
		@media only screen and (max-width: @minLargeWidth) {
			.min-height(@value);
		}
	}

	.small-min-height(@value) {
		@media only screen and (max-width: @minMediumWidth) {
			.min-height(@value);
		}
	}

	
.all-min-height(@full;@medium;@small) {
	.min-height(@full);
	.medium-min-height(@medium);
	.small-min-height(@small);
}
	
// min-height
.max-height(@value) {
	max-height: @value;
}

	.medium-max-height(@value) {
		@media only screen and (max-width: @minLargeWidth) {
			.max-height(@value);
		}
	}

	.small-max-height(@value) {
		@media only screen and (max-width: @minMediumWidth) {
			.max-height(@value);
		}
	}
	
.all-max-height(@full;@medium;@small) {
	.max-height(@full);
	.medium-max-height(@medium);
	.small-max-height(@small);
}
	
/* *********************************************************** */
// Block displaying

.hide() {
	display: none;
	.opacity(0,0);
}

	.medium-hide() {
		@media only screen and (max-width: @minLargeWidth) {
			.hide();
		}
	}

	.small-hide() {
		@media only screen and (max-width: @minMediumWidth) {
			.hide();
		}
	}

// show
.show(@type:"block") when (@type = "block") {
	display: block;
	.opacity(1,100);
} 

.show(@type) when (@type = "inline-block") {
	display: inline-block;
	.fixIe7(display,inline-block);
	.opacity(1,100);
}

	.medium-show(@type:"block") {
		@media only screen and (max-width: @minLargeWidth) {
			.show(@type);
		}
	}

	.small-show(@type:"block") {
		@media only screen and (max-width: @minMediumWidth) {
			.show(@type);
		}
	}

/* *********************************************************** */
// set the block's margins
.offset (@index) when (@index < @nbColumns) {
	margin-left: @min*@index;
}

	.medium-offset (@index) {
		@media only screen and (max-width: @minLargeWidth) {
			.offset(@index);
		}
	}

	.small-offset (@index) {
		@media only screen and (max-width: @minMediumWidth) {
			.offset(@index);
		}
	}
	
.all-offset(@full:0;@medium:0;@small:0) {
	.offset(@full);
	.medium-offset(@medium);
	.small-offset(@small);
}

.vOffset(@value;@type:"top") when (@type = "top") and (isnumber(@value)) and (@value < @nbColumns) {
	margin-top: @min*value;
}
.vOffset(@value;@type:"top") when (@type = "top") and (ispercentage(@value)) {
	margin-top: @value
}

.vOffset(@value;) when (@type = "bottom") and (isnumber(@value)) and (@value < @nbColumns) {
	margin-bottom: @min*value;
}

.vOffset(@value;@type) when (@type = "bottom") and (ispercentage(@value)) {
	margin-bottom: @value;
}

	.medium-vOffset(@value;@type:"top") {
		@media only screen and (max-width: @minLargeWidth) {
			.vOffset(@value;@type);
		}
	}
	
	.small-vOffset(@value;@type:"top") {
		@media only screen and (max-width: @minMediumWidth) {
			.vOffset(@value;@type);
		}
	}
	
.all-vOffset (@full;@medium;@small;@tFull:"top";@tMedium:"top";@tSmall:"top") {
	.vOffset(@full;@tFull);
	.medium-vOffset(@medium;@tMedium);
	.small-vOffset(@small;@tSmall);
}

/* *********************************************************** */
// move block to right
.push (@index) when (@index < @nbColumns) {
	left: @min*@index;
}

	.medium-push (@index) {
		@media only screen and (max-width: @minLargeWidth) {
			.push(@index);
		}
	}

	.small-push (@index) {
		@media only screen and (max-width: @minMediumWidth) {
			.push(@index);
		}
	}
	
.all-push(@full;@medium:0;@small:0) {
	.push(@full);
	.medium-push(@medium);
	.small-push(@small);
}
	
/* *********************************************************** */
// move block to left
.pull (@index) when (@index < @nbColumns) {
	right: @min*@index;
}

	.medium-pull (@index) {
		@media only screen and (max-width: @minLargeWidth) {
			.pull(@index);
		}
	}

	.small-pull (@index) {
		@media only screen and (max-width: @minMediumWidth) {
			.pull(@index);
		}
	}
	
.all-pull(@full;@medium:0;@small:0) {
	.pull(@full);
	.medium-pull(@medium);
	.small-pull(@small);
}

/* *********************************************************** */
// create the block-grid system
.block-grid (@index;@gutter:0) {
	& > * {
		.column();
		width: 100% / @index - @gutter;
		margin-right: @gutter;
	}
}

	// create the small block-grid system
	.medium-block-grid (@index;@gutter:0) {
		@media only screen and (max-width: @minLargeWidth) {
			& > * {
				.column();
				width: 100% / @index - @gutter;
				margin-right: @gutter;
			}
		}
	}

	// create the small block-grid system
	.small-block-grid (@index;@gutter:0) {
		@media only screen and (max-width: @minMediumWidth) {
			& > * {
				.column();
				width: 100% / @index - @gutter;
				margin-right: @gutter;
			}
		}
	}

.all-block-grid (@full;@medium;@small;@gFull:0;@gMedium:0;@gSmall:0;) {
	.block-grid(@full;@gFull);
	.medium-block-grid(@medium;@gMedium);
	.small-block-grid(@small;@gSmall);
}
	
/* *********************************************************** */
// set the resize transition
.resizeTransition () when (@useResizeTransition = true) {
	-webkit-transition: 0.2s all ease-out;
	-webkit-backface-visibility: hidden;
	-moz-transition: 0.2s all ease-out;
	transition: 0.2s all ease-out;
}
// reset all value for row and body
.resetValueForNewMediaQuery {
	// reset body
	body { 
		-webkit-text-size-adjust: none;
		-ms-text-size-adjust: none;
		width: 100%;
		min-width: 0;
		margin-left: 0;
		margin-right: 0;
		padding-left: 0;
		padding-right: 0;
	}
	//
	.row { width: auto; min-width: 0; margin-left: 0; margin-right: 0; }
}
// for use inside an object
.resetRow () {
	width: auto; min-width: 0; margin-left: 0; margin-right: 0;
}
/* Global Reset & Standards ---------------------- */
*, *:before, *:after { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; }
/* Grid ----------------------------------------------- */
.parent () {
	.row;
	@media only screen and (max-width: @minLargeWidth) {
		.resetRow;
	}
	
}

.row {
	width: @mainWidth;
	min-width: @minLargeWidth;
	max-width: 100%;
	margin: 0 auto;
	.row {
		width: auto;
		max-width: none;
		min-width: 0;
		margin: 0 -15px;
	}
	@media only screen and (max-width: @minLargeWidth) {
		.resetRow;
	}
}

@media only screen and (max-width: @minLargeWidth) {
	body { 
		-webkit-text-size-adjust: none;
		-ms-text-size-adjust: none;
		width: 100%;
		min-width: 0;
		margin-left: 0;
		margin-right: 0;
		padding-left: 0;
		padding-right: 0;
	}
	.row {
		width: auto; min-width: 0; margin-left: 0; margin-right: 0;
	}
}

// prepare column, no fucking float...
.column() {
	.resizeTransition;
	display: inline-block;
	.fixIe7(display,inline-block);
	min-height: 1px;
	position: relative; 
	vertical-align: top;
}

// htmlObject resize automatically
img { display: inline-block; .fixIe7(display,inline-block); -ms-interpolation-mode: bicubic; }
img, object, embed { max-width: 100%; height: auto; }
object, embed { height: 100%; }
img { -ms-interpolation-mode: bicubic; }
#map_canvas img, .map_canvas img { max-width: none!important; }
